AWSTemplateFormatVersion: '2010-09-09'
Description: 'Parent Stack to create nested stacks for EKS cluster, node group, ASG, lambda, and IAM resources.'
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: 'EKS Configuration'
        Parameters:
          - ClusterName
          - Environment
          - KeyName
          - NodeGroupName
      - Label:
          default: 'Auto Scaling Configuration'
        Parameters:
          - NodeInstanceType
      - Label:
          default: 'VPC Configuration'
        Parameters:
          - SubnetPrivate
          - SubnetPublic
          - VpcCIDR

Parameters:
  ClusterName:
    Description: The name of the eks-cluster that will be provisioned
    Type: String
    Default: eks-cluster

  ClusterVersion:
    Description: Cluster Version
    Type: String
    Default: 'latest'
    AllowedValues:
      - '1.10'
      - '1.11'
      - '1.12'
      - 'latest'

  Environment:
    Description: Name of the environment for this stack.
    Type: String
    Default: dev
    AllowedValues:
      - dev
      - qa
      - stage
      - prod
    ConstraintDescription: 'Must be a valid environment type.'

  FunctionName:
    Description: Unique name used in name schema of the serverless app ConfigMap hook for aws-auth-cm
    Type: String
    Default: defaultFunc

  KeyName:
    Description: The EC2 Key Pair to allow SSH access to the instances
    Type: String
    Default: 'dev'

  KubeAdminRole:
    Description: The K8s admin IAM role that will be used to create and manage the EKS cluster
    Type: String
    Default: arn:aws:iam::627177891842:role/AmazonEKSAdminRole

  NodeGroupName:
    Description: Unique resource identifier for the Node Group.
    Type: String
    Default: green

  SubnetPublic:
    Description: Comma seperated list of 2 VPC CIDR Blocks for Public Subnets (eg 10.100.2.0/24,10.100.3.0/24)
    Type: CommaDelimitedList
    Default: '10.100.4.0/24,10.100.5.0/24,10.100.6.0/24'

  SubnetPrivate:
    Description: Comma seperated list of 3 VPC CIDR Blocks for Private Subnets (eg 10.100.2.0/24,10.100.3.0/24)
    Type: CommaDelimitedList
    Default: '10.100.1.0/24,10.100.2.0/24,10.100.3.0/24'

  VpcCIDR:
    Description: Please enter the IP range (CIDR notation) for this VPC
    Type: String
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/(1[6-9]|2[0-8]))$
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/16-28
    Default: '10.100.0.0/16'

Mappings:
  RegionMap:
    us-east-1:
      kubelayer: arn:aws:lambda:us-east-1:627177891842:layer:lambda-layer-kubectl:2
Conditions:
  IsDev: !Equals [!Ref Environment, dev]
  IsProd: !Equals [!Ref Environment, prod]
  IsQA:  !Equals [!Ref Environment, qa]
  IsStage:  !Equals [!Ref Environment, stage]
  IsProdOrStage: !Or [Condition: IsProd, Condition: IsStage]
  NotProd: !Not [!Equals [!Ref Environment, prod]]
Resources:
  # Nested Stacks

  ###########
  # VPC
  ###########
  VPC:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub 'https://granite-eks-playground.s3.amazonaws.com/vpc.yaml'
      Parameters:
        Environment: !Ref Environment
        SubnetPrivate: !Join [',', [!Select [ 0, !Ref SubnetPrivate ], !Select [ 1, !Ref SubnetPrivate ], !Select [ 2, !Ref SubnetPrivate ]]]
        SubnetPublic: !Join [',', [!Select [ 0, !Ref SubnetPublic ], !Select [ 1, !Ref SubnetPublic ], !Select [ 2, !Ref SubnetPublic ]]]
        VpcCIDR: !Ref VpcCIDR

  ###########
  # EKS Cluster
  ###########
  Cluster:
    DependsOn: VPC
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub 'https://granite-eks-playground.s3.amazonaws.com/cluster.yaml'
      Parameters:
        ClusterName: !Ref ClusterName
        ClusterVersion: !Ref ClusterVersion
        SubnetIds: !GetAtt VPC.Outputs.SubnetsCluster
        VPCID: !GetAtt VPC.Outputs.VPC

  ###########
  # EKS Worker Nodes
  ###########
  NodeGroup:
    DependsOn: Cluster
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub 'https://granite-eks-playground.s3.amazonaws.com/nodegroup-dev.yaml'
      Parameters:
        ClusterName: !Ref ClusterName
        ControlPlaneSecurityGroup: !GetAtt Cluster.Outputs.ControlSecurityGroup
        KeyName: !Ref KeyName
        NodeSecurityGroup: !GetAtt Cluster.Outputs.NodeSecurityGroup
        NodeGroupName: !Ref NodeGroupName
        SubnetIds: !GetAtt VPC.Outputs.SubnetsPrivate
        VPCID: !GetAtt VPC.Outputs.VPC

  ###########
  # Lambda to add the custom IAM role to the k8's auth config map
  ###########
  ConfigMapLambda:
    DependsOn: NodeGroup
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub 'https://granite-eks-playground.s3.amazonaws.com/configmap-sar.yaml'
      Parameters:
        ClusterName: !Ref ClusterName
        LambdaLayerKubectlArn: !FindInMap [RegionMap, !Ref "AWS::Region", kubelayer]
        LambdaRoleArn: !Ref KubeAdminRole
        NodeInstanceRoleArn: !GetAtt NodeGroup.Outputs.NodeInstanceRole

---
AWSTemplateFormatVersion: '2010-09-09'
Description: 'VPC'
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: 'Aws Environment'
        Parameters:
          - Environment

Parameters:
  Environment:
    Description: 'Name of the environment for this stack.'
    Type: String
    Default: dev
    AllowedValues:
      - dev
      - qa
      - stage
      - prod
    ConstraintDescription: 'Must be a valid environment type.'

  SubnetPublic:
    Description: 2 Public subnets (CIDR notation)
    Type: CommaDelimitedList

  SubnetPrivate:
    Description: 3 Private subnets (CIDR notation)
    Type: CommaDelimitedList

  VpcCIDR:
        Description: Please enter the IP range (CIDR notation) for this VPC
        Type: String
        AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/(1[6-9]|2[0-8]))$
        ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/16-28

Mappings:
  # Testing for tag schema
  RegionMap:
    us-east-1:
      RegionCode: UE1

Conditions:
  IsDev: !Equals [!Ref Environment, dev]
  IsProd: !Equals [!Ref Environment, prod]
  IsQA:  !Equals [!Ref Environment, qa]
  IsStage:  !Equals [!Ref Environment, stage]
  IsProdOrStage: !Or [Condition: IsProd, Condition: IsStage]
  NotProd: !Not [!Equals [!Ref Environment, prod]]
Resources:
  VPC:
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock: !Ref VpcCIDR
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value:
            'Fn::Join':
            - '-'
            - - !Ref Environment
              - !Ref VpcCIDR

  # Public Subnets
  SubnetPublic1:
    Type: 'AWS::EC2::Subnet'
    DependsOn: VPC
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Select [ 0, !Ref SubnetPublic ]
      AvailabilityZone:  !Select [0, !GetAZs ""]
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value:
            'Fn::Join':
            - '-'
            - - public
              - !Select [ 0, !Ref SubnetPublic ]
              - !Select [0, !GetAZs ""]

  SubnetPublic2:
    Type: 'AWS::EC2::Subnet'
    DependsOn: VPC
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Select [ 1, !Ref SubnetPublic ]
      AvailabilityZone:  !Select [1, !GetAZs ""]
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value:
            'Fn::Join':
            - '-'
            - - public
              - !Select [ 1, !Ref SubnetPublic ]
              - !Select [1, !GetAZs ""]

  # Private Subnets
  SubnetPrivate1:
    Type: 'AWS::EC2::Subnet'
    DependsOn: VPC
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Select [ 0, !Ref SubnetPrivate ]
      AvailabilityZone:  !Select [0, !GetAZs ""]
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value:
            'Fn::Join':
            - '-'
            - - private
              - !Select [ 0, !Ref SubnetPrivate ]
              - !Select [0, !GetAZs ""]

  SubnetPrivate2:
    Type: 'AWS::EC2::Subnet'
    DependsOn: VPC
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Select [ 1, !Ref SubnetPrivate ]
      AvailabilityZone:  !Select [1, !GetAZs ""]
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value:
            'Fn::Join':
            - '-'
            - - private
              - !Select [ 1, !Ref SubnetPrivate ]
              - !Select [1, !GetAZs ""]

  SubnetPrivate3:
    Type: 'AWS::EC2::Subnet'
    DependsOn: VPC
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Select [ 2, !Ref SubnetPrivate ]
      AvailabilityZone:  !Select [2, !GetAZs ""]
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value:
            'Fn::Join':
            - '-'
            - - private
              - !Select [ 2, !Ref SubnetPrivate ]
              - !Select [2, !GetAZs ""]

  ########
  # NAT Resources
  ########
  NATEIP1:
    Type: 'AWS::EC2::EIP'
    Properties:
      Domain: vpc

  NATEIP2:
    Type: 'AWS::EC2::EIP'
    Condition: IsProd
    Properties:
      Domain: vpc

  NGW1:
    Type: 'AWS::EC2::NatGateway'
    DependsOn:
      - SubnetPublic1
    Properties:
      AllocationId: !GetAtt
        - NATEIP1
        - AllocationId
      SubnetId: !Ref  SubnetPublic1

  NGW2:
    Type: 'AWS::EC2::NatGateway'
    Condition: IsProd
    DependsOn:
      - SubnetPublic2
    Properties:
      AllocationId: !GetAtt
        - NATEIP2
        - AllocationId
      SubnetId: !Ref  SubnetPublic2

  NATRoute1:
    Type: 'AWS::EC2::Route'
    DependsOn: NGW1
    Properties:
      NatGatewayId: !Ref NGW1
      RouteTableId: !Ref routetableprivate1
      DestinationCidrBlock: 0.0.0.0/0

  ##############################
  # DependsOn will not allow conditional functions like !If and hence why
  # we have another conditional resource below.
  # The intent is to make sure we only spend money on additional NAT GW in prod. There are other
  # ways to accomplish this with condtions but this was an attempt to require the least amount
  # of conditional resources since it starts to get ugly if there are more than a 2-3.
  #############################
  NATRoute1a:
    Type: 'AWS::EC2::Route'
    Condition: NotProd
    DependsOn: NGW1
    Properties:
      NatGatewayId: !Ref NGW1
      RouteTableId: !Ref routetableprivate2
      DestinationCidrBlock: 0.0.0.0/0

  NATRoute2:
    Type: 'AWS::EC2::Route'
    Condition: IsProd
    DependsOn:  NGW2
    Properties:
      NatGatewayId: !Ref NGW2
      RouteTableId: !Ref routetableprivate2
      DestinationCidrBlock: 0.0.0.0/0

  #########
  # Gateway and Route Tables
  #########
  IGW:
    Type: 'AWS::EC2::InternetGateway'
    DependsOn:
      - SubnetPublic1
      - SubnetPublic2

  IGAttach:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref IGW

  IGWDefaultRoute:
    Type: 'AWS::EC2::Route'
    DependsOn:
      - IGW
      - IGAttach
    Properties:
      GatewayId: !Ref IGW
      RouteTableId: !Ref routetablepublic
      DestinationCidrBlock: 0.0.0.0/0

  routetablepublic:
    Type: 'AWS::EC2::RouteTable'
    DependsOn: VPC
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: public

  routetableprivate1:
    Type: 'AWS::EC2::RouteTable'
    DependsOn: VPC
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value:
            'Fn::Join':
            - ':'
            - - private
              - !Select [ 0, !Ref SubnetPrivate ]

  routetableprivate2:
    Type: 'AWS::EC2::RouteTable'
    DependsOn: VPC
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value:
            'Fn::Join':
            - ':'
            - - private
              - !Select [ 1, !Ref SubnetPrivate ]

  routetableprivate3:
    Type: 'AWS::EC2::RouteTable'
    DependsOn: VPC
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value:
            'Fn::Join':
            - ':'
            - - private
              - !Select [ 2, !Ref SubnetPrivate ]
  ###########
  # Route Table Associations
  ###########
  a:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref  SubnetPublic1
      RouteTableId: !Ref routetablepublic

  b:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref  SubnetPublic2
      RouteTableId: !Ref routetablepublic

  c:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref SubnetPrivate1
      RouteTableId: !Ref routetableprivate1
  d:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref SubnetPrivate2
      RouteTableId: !Ref routetableprivate2

  ###########
  # Security Groups
  ###########


#Outputs that can be consumed by other stacks
Outputs:
  AZs:
    Description: 'AZs'
    Value: !Join [',', [!Select [0, !GetAZs ''], !Select [1, !GetAZs '']]]
    Export:
      Name: !Sub '${AWS::StackName}-AZs'

  AZA:
    Description: 'AZ of A'
    Value: !Select [0, !GetAZs '']
    Export:
      Name: !Sub '${AWS::StackName}-AZA'
  AZB:
    Description: 'AZ of B'
    Value: !Select [1, !GetAZs '']
    Export:
      Name: !Sub '${AWS::StackName}-AZB'
  AZC:
    Description: 'AZ of C'
    Value: !Select [2, !GetAZs '']
    Export:
      Name: !Sub '${AWS::StackName}-AZC'

  AZD:
    Description: 'AZ of D'
    Value: !Select [3, !GetAZs '']
    Export:
      Name: !Sub '${AWS::StackName}-AZD'

  SubnetPrivate1:
    Description: Private Subnet 1
    Value: !Ref SubnetPrivate1
    Export:
      Name: !Sub '${AWS::StackName}-SubnetPrivate1'

  SubnetPrivate2:
    Description: Private Subnet 2
    Value: !Ref SubnetPrivate2
    Export:
      Name: !Sub '${AWS::StackName}-SubnetPrivate2'

  SubnetPublic1:
    Description: Public Subnet 1
    Value: !Ref SubnetPublic1
    Export:
      Name: !Sub '${AWS::StackName}-SubnetPublic1'

  SubnetPublic2:
    Description: Public Subnet 2
    Value: !Ref SubnetPublic2
    Export:
      Name: !Sub '${AWS::StackName}-SubnetPublic2'

  SubnetsPrivate:
    Description: 'Subnets private.'
    Value: !Join [',', [!Ref SubnetPrivate1, !Ref SubnetPrivate2, !Ref SubnetPrivate3]]
    Export:
      Name: !Sub '${AWS::StackName}-SubnetsPrivate'

  SubnetsPublic:
    Description: 'Subnets public.'
    Value: !Join [',', [!Ref SubnetPublic1, !Ref SubnetPublic2]]
    Export:
      Name: !Sub '${AWS::StackName}-SubnetsPublic'
  VPC:
    Description: VPC
    Value: !Ref VPC
    Export:
      Name: !Sub '${AWS::StackName}-VPCId'

  VPCCidr:
    Description: VPC Subnet
    Value: !Ref VpcCIDR
    Export:
      Name: !Sub '${AWS::StackName}-VPCCidr'

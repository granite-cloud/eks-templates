---
AWSTemplateFormatVersion: '2010-09-09'
Description: 'Amazon EKS Node Group'
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: "EKS Configuration"
        Parameters:
          - BootstrapArgumentsForOnDemand
          - BootstrapArgumentsForSpotFleet
          - ClusterName
          - ControlPlaneSecurityGroup
          - Environment
          - EnvSize
          - KeyName
          - NodeGroupName
          - NodeImageId
          - NodeSecurityGroup
          - SubnetIds
          - VPCID
      - Label:
          default: "Auto Scaling Configuration"
        Parameters:
          - ASGMinSize
          - ASGDesiredSize
          - ASGMaxSize
          - ASGAutoAssignPublicIp
          - InstanceTypesOverride
          - NodeInstanceType
          - OnDemandBaseCapacity
          - OnDemandPercentageAboveBaseCapacity
          - SpotInstancePools
      - Label:
          default: "TargetGroup"
        Parameters:
          - TargetGroupPort

Parameters:
  ASGMinSize:
    Type: Number
    Description: Minimum size of Node Group ASG.
    Default: 1

  ASGDesiredSize:
    Type: Number
    Description: Desired size of Node Group ASG.
    Default: 2

  ASGMaxSize:
    Type: Number
    Description: Maximum size of Node Group ASG.
    Default: 3

  BootstrapArgumentsForOnDemand:
    Description: Arguments to pass to the bootstrap script. See files/bootstrap.sh in https://github.com/awslabs/amazon-eks-ami
    Default: "--kubelet-extra-args --node-labels=ondemand=yes"
    Type: String

  BootstrapArgumentsForSpotFleet:
    Description: Arguments to pass to the bootstrap script. See files/bootstrap.sh in https://github.com/awslabs/amazon-eks-ami
    Default: "--kubelet-extra-args '--node-labels=spotfleet=yes --register-with-taints=spotInstance=true:PreferNoSchedule'"
    Type: String

  ClusterName:
    Description: The cluster name provided when the cluster was created.  If it is incorrect, nodes will not be able to join the cluster.
    Type: String

  ClusterStackName:
    Description: 'Name of the existing EKS Cluster CloudFormation stack to import resources from.'
    Type: String
    Default: 'eks-cluster'

  ControlPlaneSecurityGroup:
    Description: 'Control Plane Security Group ID'
    Type: String

  Environment:
    Description: 'Name of the environment for this stack.'
    Type: String
    Default: dev
    AllowedValues:
      - dev
      - prod

  EnvSize:
    Description: 'This will determine the instance size used.'
    Type: String
    Default: 'Small'
    AllowedValues:
      - Small
      - Medium
      - Large
      - Xlarge

  InstanceTypesOverride:
    Type: String
    Description: "multiple spot instances to override(seperated by comma)"
    Default: "t3.medium,t3.large,t3.xlarge"

  KeyName:
    Description: The EC2 Key Pair to allow SSH access to the instances
    Type: AWS::EC2::KeyPair::KeyName

  NodeImageId:
    Description: AMI id for the node instances.
    Type: 'AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>'
    Default: '/eks/ami-eks-latest'

  NodeGroupName:
    Description: Unique resource identifier for the Node Group.
    Type: String

  NodeInstanceType:
    Description: Default EC2 instance type for the node instances.
    Type: String
    Default: t3.small
    AllowedValues:
    - t3.small
    - t3.medium
    - t3.large
    ConstraintDescription: must be a valid EC2 instance type.

  NodeSecurityGroup:
    Description: 'Control Plane Security Group ID'
    Type: String

  OnDemandBaseCapacity:
    Type: Number
    Description: "on-demand base capacity"
    Default: 2

  OnDemandPercentageAboveBaseCapacity:
    Type: Number
    Description: "on-demand percentage above base capacity(0-100)"
    Default: 0

  SpotInstancePools:
    Type: Number
    Description: "spot instance pools(1-20)"
    Default: 1

  SubnetIds:
   Description: 'Array of Subnets where workers can be created.'
   Type: List<AWS::EC2::Subnet::Id>

  TargetGroupPort:
    Description: The port on which the targets receive traffic from TargetGroup
    Type: String
    Default: 31742

  VPCID:
    Description: 'VPC ID'
    Type: String

Mappings:
  EnvSize:
    Small:
      EBSVolumeSize: 200
    Medium:
      EBSVolumeSize: 400
    Large:
      EBSVolumeSize: 500
    Xlarge:
      EBSVolumeSize: 500
Resources:
  NodeInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: "/"
      Roles:
      - !Ref NodeInstanceRole

  NodeInstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - ec2.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy
        - arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy
        - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly


  NodeSecurityGroupIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Allow node to communicate with each other
      GroupId:
         Fn::ImportValue: !Ref NodeSecurityGroup
      SourceSecurityGroupId:
        Fn::ImportValue: !Ref NodeSecurityGroup
      IpProtocol: '-1'
      FromPort: 0
      ToPort: 65535

  NodeSecurityGroupFromControlPlaneIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Allow worker Kubelets and pods to receive communication from the cluster control plane
      GroupId:
         Fn::ImportValue: !Ref NodeSecurityGroup
      SourceSecurityGroupId:
         Fn::ImportValue: !Ref ControlPlaneSecurityGroup
      IpProtocol: tcp
      FromPort: 1025
      ToPort: 65535

  ControlPlaneEgressToNodeSecurityGroup:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      Description: Allow the cluster control plane to communicate with worker Kubelet and pods
      GroupId:
        Fn::ImportValue: !Ref ControlPlaneSecurityGroup
      DestinationSecurityGroupId:
        Fn::ImportValue: !Ref NodeSecurityGroup
      IpProtocol: tcp
      FromPort: 1025
      ToPort: 65535

  NodeSecurityGroupFromControlPlaneOn443Ingress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Allow pods running extension API servers on port 443 to receive communication from cluster control plane
      GroupId:
         Fn::ImportValue: !Ref NodeSecurityGroup
      SourceSecurityGroupId:
         Fn::ImportValue: !Ref ControlPlaneSecurityGroup
      IpProtocol: tcp
      FromPort: 443
      ToPort: 443

  ControlPlaneEgressToNodeSecurityGroupOn443:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      Description: Allow the cluster control plane to communicate with pods running extension API servers on port 443
      GroupId:
        Fn::ImportValue: !Ref ControlPlaneSecurityGroup
      DestinationSecurityGroupId:
        Fn::ImportValue: !Ref NodeSecurityGroup
      IpProtocol: tcp
      FromPort: 443
      ToPort: 443

  ControlPlaneSecurityGroupIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Allow pods to communicate with the cluster API Server
      GroupId:
        Fn::ImportValue: !Ref ControlPlaneSecurityGroup
      SourceSecurityGroupId:
        Fn::ImportValue: !Ref NodeSecurityGroup
      IpProtocol: tcp
      ToPort: 443
      FromPort: 443

  #TG:
  #  Type: "AWS::ElasticLoadBalancingV2::TargetGroup"
  #  Properties:
  #    HealthCheckIntervalSeconds: 15
  #    HealthCheckPath: /
      # HealthCheckPort: String
  #    HealthCheckProtocol: HTTP
  #    HealthCheckTimeoutSeconds: 5
  #    HealthyThresholdCount: 2
  #    Name: !Sub "${AWS::StackName}-tg"
  #    Port: !Ref TargetGroupPort
  #    Protocol: HTTP
  #    TargetType: instance
  #    UnhealthyThresholdCount: 2
  #    VpcId: !Ref VPCID

  NodeGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      DesiredCapacity: !Ref ASGDesiredSize
      MixedInstancesPolicy:
        InstancesDistribution:
          OnDemandAllocationStrategy: prioritized
          OnDemandBaseCapacity: !Ref OnDemandBaseCapacity
          OnDemandPercentageAboveBaseCapacity: !Ref OnDemandPercentageAboveBaseCapacity
          SpotAllocationStrategy: lowest-price
          SpotInstancePools: !Ref SpotInstancePools
          # SpotMaxPrice: String
        LaunchTemplate:
          LaunchTemplateSpecification:
              LaunchTemplateId: !Ref LaunchTemplate
              # LaunchTemplateName: String
              Version: !GetAtt LaunchTemplate.LatestVersionNumber
          Overrides:
              - InstanceType: !Select [0, !Split [ ",", !Ref InstanceTypesOverride ] ]
              - InstanceType: !Select [1, !Split [ ",", !Ref InstanceTypesOverride ] ]
              - InstanceType: !Select [2, !Split [ ",", !Ref InstanceTypesOverride ] ]
      MinSize: !Ref ASGMinSize
      MaxSize: !Ref ASGMaxSize
      #TargetGroupARNs:
      #  - !Ref TG
      VPCZoneIdentifier: !Split
        - ','
        - !Ref SubnetIds
      Tags:
      - Key: Name
        Value: !Sub "${ClusterName}-${NodeGroupName}-ASG"
        PropagateAtLaunch: 'true'
      - Key: !Sub 'kubernetes.io/cluster/${ClusterName}'
        Value: 'owned'
        PropagateAtLaunch: 'true'
    UpdatePolicy:
      AutoScalingRollingUpdate:
        MinInstancesInService: '1'
        MaxBatchSize: '1'

  #####
  # Launch Template
  #####
  LaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: !Sub "eksLaunchTemplate-${AWS::StackName}"
      LaunchTemplateData:
        SecurityGroupIds:
           - Fn::ImportValue: !Sub '${ClusterStackName}-NodeSecurityGroup'
        TagSpecifications:
          -
            ResourceType: instance
            Tags:
              - Key: Name
                Value: !Sub "${ClusterName}-${NodeGroupName}-ASG-Node"
              - Key: KubernetesCluster
                Value: !Ref ClusterName
              - Key: !Sub 'kubernetes.io/cluster/${ClusterName}'
                Value: 'owned'
        UserData:
          Fn::Base64:
            !Sub |
            #!/bin/bash
            set -o xtrace
            iid=$(curl -s http://169.254.169.254/latest/meta-data/instance-id)
            export AWS_DEFAULT_REGION=${AWS::Region}

            ilc=`aws ec2 describe-instances --instance-ids  $iid  --query 'Reservations[0].Instances[0].InstanceLifecycle' --output text`
            if [ "$ilc" == "spot" ]; then
              /etc/eks/bootstrap.sh ${ClusterName} ${BootstrapArgumentsForSpotFleet}
            else
              /etc/eks/bootstrap.sh ${ClusterName} ${BootstrapArgumentsForOnDemand}
            fi

            /opt/aws/bin/cfn-signal --exit-code $? \
                     --stack  ${AWS::StackName} \
                     --resource NodeGroup  \
                     --region ${AWS::Region}
        IamInstanceProfile:
          Arn: !GetAtt NodeInstanceProfile.Arn
        KeyName: !Ref KeyName
        ImageId: !Ref NodeImageId
        InstanceType: !Ref NodeInstanceType

Outputs:
  NodeInstanceRole:
    Description: The node instance role
    Value: !GetAtt NodeInstanceRole.Arn
    Export:
      Name: !Sub "${AWS::StackName}-NodeInstanceRole"